http://www.brackeen.com/vga/bitmaps.html
by: David Brackeen


Drawing Bitmap
--------------
The following is the code to display a 32x64 image stored in an array bitmap:

for(y=0;y<64;y++)
  for(x=0;x<32;x++)
    VGA [x+y*320]=bitmap [x+y*32];

The following implements this using zero as the transparency value:

for(y=0;y<64;y++)
  for(x=0;x<32;x++)
  {
    data=bitmap [x+y*32];
    if (data!=0) VGA [x+y*320]=data;
  }


Palette manipulation
--------------------
To set one color in the palette, write the color index to port 0x3C8 and
then write the red, green, and blue values, in order, to port 0x3C9

    outp(0x03c8, index);
    outp(0x03c9, red);
    outp(0x03c9, green);
    outp(0x03c9, blue);

To set all 256 colors in the palette, write zero to port 0x3C8
and then write all 768 bytes of the palette to port 0x3C9.

    outp(0x03c8, 0);
    for(i=0;i<256;i++)
    {
        outp(0x03c9, palette_red[i]);
        outp(0x03c9, palette_green[i]);
        outp(0x03c9, palette_blue[i];
    }

Note that the palette cannot be set until the 256-color video mode has been set.


Vertical retrace
----------------
Something to note about the program is the function wait_for_retrace:

void wait_for_retrace(void)
{
  /* wait until done with vertical retrace */
  while  ((inp(INPUT_STATUS) & VRETRACE));
  /* wait until done refreshing */
  while (!(inp(INPUT_STATUS) & VRETRACE));
}

If the while loops in this function were commented out and the program was run,
two things would happen:

1. the palette would cycle very, very quickly,
2. the image would appear to have shearing effect as the palette cycled.

