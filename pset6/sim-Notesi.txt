In common:
- line compare based on number of lines
- sentence compare based on number of sentence
- substring compare based on number of substring

index.html displays from where user can select 2 files to compare

Lines - TODO: ----------------------------------------
* take in strings a and b
* split each string into lines (ex. at the end)
* comput a list of all lines appear in both a and b
* return the list

ex. "line one\nline two\nline three\nline"
["line one", "line two", "line three"]

find lines in common
data structure
 - list
 - set

 must print only once!


Sentence - TODO: -----------------------------------------
* take in string inputs a and b
* split each string into sentences
* compute list of all sentence appearing in both a and b
* return the list

splitting a string into sentence:
"hello there! how are you?"
["hello there!", "how are you?"]


Substrings - TODO: ----------------------------------------
* take in string input a, b and substring length n
* split each string into all substrings of length n
* compute list of all substrings appearing in both a and b
* return the list

splitting into substring:
n = 2  "hello" ---> ["he", "el", "ll", "lo"]
n = 3  "hello" ---> ["hel", "ell", "llo"]

* Extract substrings from string
  - s[i:j] returns the substring of s from
    index i to(but not including) index j
* May want to write a helper funtion


index.html - TODO: ----------------------------------------------
* inside the body block, add a form
* make sure form sends correctly encoded POST request to/compare
* let user choose file1, file2, algorithm, length
* add a button to submit the form

Input fields:
* use <input> tags
* give each input tag a name attribute
  - file1, file2, algorithm, length
* Decide which type attribute to give each input
  - file, radio, number
* For algorithm, give each input tag a value attribute
  - lines, sentence, substrings
