// Implements a dictionary's functionality
#include <string.h>
#include <stdbool.h>
#include <cs50.h>
#include "dictionary.h"

typedef struct node
{
    bool is_word;
    struct node* children[27];
}
node;
node *root;

// *CHECK - Returns true if word is in dictionary else false
bool check(const char *word)

*traverse linked list
{
    // TODO
    node *cursor = head;
    whie(cursor != NULL)
    {
        // do something
        cursor = cursor -> next;
    }
    return false;
}

// *LOAD - Loads dictionary into memory, returning true if successful else false
bool load(const char *dictionary)
{
    // TODO
    typedef struct node
    {
        char word [LENGTH + 1];
        struct node *next;
    }
    node;
    node *hashtable[26];

    node *node 1 = mallac(sizeof(node));
    node *node 2 = mallac(sizeof(node));
    strcpy(node 1 -> word, "");
    strcpy(node 2 -> word, "");
    node 1 -> next = node 2;
    return false;
}

while (fscanf(file, "%s", word) ! = EOF)
{
    node* new_node = malloc(sizeof(node));
    if (new_node == NULL)
    {
        unload();
        return false;
    }
}

strcpy (new_node->word, word); // copy word into node

// Returns number of words in dictionary if loaded else 0 if not yet loaded
unsigned int size(void)
{
    // TODO
    return 0;
}

// *UPLOAD - Unloads dictionary from memory, returning true if successful else false
bool unload(void)
{
    // TODO
    node* cursor = head;
    while (cursor != NULL)
    {
        node *temp = cursor;
        cursor = cursor->next;
        type(temp);
    }
    return false;
}